pluginManagement {
    /**
     * The pluginManagement {repositories {...}} block configures the
     * repositories Gradle uses to search or download the Gradle plugins and
     * their transitive dependencies. Gradle pre-configures support for remote
     * repositories such as JCenter, Maven Central, and Ivy. You can also use
     * local repositories or define your own remote repositories. The code below
     * defines the Gradle Plugin Portal, Google's Maven repository,
     * and the Maven Central Repository as the repositories Gradle should use to look for its
     * dependencies.
     */
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
}

dependencyResolutionManagement {
    /**
     * The dependencyResolutionManagement {repositories {...}}
     * block is where you configure the repositories and dependencies used by
     * all modules in your project, such as libraries that you are using to
     * create your application. However, you should configure module-specific
     * dependencies in each module-level build.gradle file. For new projects,
     * Android Studio includes Google's Maven repository and the Maven Central
     * Repository by default, but it does not configure any dependencies (unless
     * you select a template that requires some).
     */
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
    versionCatalogs {
        libs {
            library('androidx.core', 'androidx.core:core:1.5.0-rc01')
            library('androidx.core.ktx', 'androidx.core:core-ktx:1.3.2')
            library('androidx.annotation', 'androidx.annotation:annotation:1.2.0')
            library('androidx.datastore', 'androidx.datastore:datastore:1.0.0')
            bundle('androidx', [
                'androidx.core',
                'androidx.core.ktx',
                'androidx.annotation',
                'androidx.datastore',
            ])
            library('androidx.room.compiler', 'androidx.room:room-compiler:2.4.3')
            library('androidx.room.runtime', 'androidx.room:room-runtime:2.4.3')
            library('androidx.room.ktx', 'androidx.room:room-ktx:2.4.3')
            library('androidx.room.testing', 'androidx.room:room-testing:2.4.3')
            bundle('androidx.room', [
                'androidx.room.runtime',
                'androidx.room.ktx',
                'androidx.room.testing',
            ])

            library('androidx.lifecycle.livedata', 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1')
            library('androidx.lifecycle.common', 'androidx.lifecycle:lifecycle-common-java8:2.3.1')
            library('androidx.lifecycle.service', 'androidx.lifecycle:lifecycle-service:2.3.1')
            bundle('androidx.lifecycle', [
                'androidx.lifecycle.livedata',
                'androidx.lifecycle.common',
                'androidx.lifecycle.service',
            ])

            library('auto.factory', 'com.google.auto.factory:auto-factory:1.0.1')
            library('auto.value', 'com.google.auto.value:auto-value-annotations:1.8')
            bundle('autovalue', ['auto.factory', 'auto.value'])

            library('kotlin.stdlib', 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.0')
            library('kotinx.coroutines.android', 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0')
            library('kotinx.coroutines.core', 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0')
            library('kotinx.coroutines.guava', 'org.jetbrains.kotlinx:kotlinx-coroutines-guava:1.6.0')
            bundle('kotlin', [
                'kotlin.stdlib',
                'kotinx.coroutines.android',
                'kotinx.coroutines.core',
                'kotinx.coroutines.guava',
            ])

            library('dagger', 'com.google.dagger:dagger:2.33')
            library('dagger.compiler', 'com.google.dagger:dagger-compiler:2.33')
            library('guava', 'com.google.guava:guava:30.0-android')
            library('javax.annotation', 'javax.annotation:javax.annotation-api:1.3.2')
            library('protobuf', 'com.google.protobuf:protobuf-java:3.10.0')
            library('gson', 'com.google.code.gson:gson:2.10.1')

            library('androidx.core.testing', 'androidx.arch.core:core-testing:2.1.0')
            library('androidx.junit', 'androidx.test.ext:junit:1.1.2')
            library('androidx.test.core', 'androidx.test:core:1.5.0')
            library('androidx.test.rules', 'androidx.test:rules:1.3.0')
            library('androidx.test.runner', 'androidx.test:runner:1.5.2')

            bundle('androidx.testing', [
                'androidx.core.testing',
                'androidx.junit',
                'androidx.test.core',
                'androidx.test.rules',
                'androidx.test.runner',
            ])

            library('dexmaker', 'com.google.dexmaker:dexmaker:1.2')
            library('truth', 'com.google.truth:truth:1.1.2')
            library('nhaarman.mockito-kotlin', 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0')
            library('kotlin.junit.test', 'org.jetbrains.kotlin:kotlin-test-junit:1.4.32')
            library('kotlin.coroutines.test', 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.1')
            library('mockito', 'org.mockito:mockito-core:3.6.0')
            library('robolectric', 'org.robolectric:robolectric:4.9.2')
            library('hamcrest', 'org.hamcrest:hamcrest:2.2')
        }
    }
}

rootProject.name = "companion"

include(":companionprotos")
include(":communicationproto")
include(":trusteddeviceproto")
include(":encryptionrunner")
include(":trustagent")
include(":trusteddevice")
include(":communication")
include(":calendarsync")
include(":loggingsupport")
include(":connectionservice")
